///
/// ChargeParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::cloudpayments {

  /**
   * A struct which can be represented as a JavaScript object (ChargeParams).
   */
  struct ChargeParams {
  public:
    double amount     SWIFT_PRIVATE;
    std::string currency     SWIFT_PRIVATE;
    std::string description     SWIFT_PRIVATE;
    std::optional<std::string> accountId     SWIFT_PRIVATE;
    std::optional<std::string> email     SWIFT_PRIVATE;
    std::optional<std::string> cardCryptogram     SWIFT_PRIVATE;
    std::optional<std::string> cardNumber     SWIFT_PRIVATE;
    std::optional<std::string> expDate     SWIFT_PRIVATE;
    std::optional<std::string> cvv     SWIFT_PRIVATE;

  public:
    ChargeParams() = default;
    explicit ChargeParams(double amount, std::string currency, std::string description, std::optional<std::string> accountId, std::optional<std::string> email, std::optional<std::string> cardCryptogram, std::optional<std::string> cardNumber, std::optional<std::string> expDate, std::optional<std::string> cvv): amount(amount), currency(currency), description(description), accountId(accountId), email(email), cardCryptogram(cardCryptogram), cardNumber(cardNumber), expDate(expDate), cvv(cvv) {}
  };

} // namespace margelo::nitro::cloudpayments

namespace margelo::nitro {

  using namespace margelo::nitro::cloudpayments;

  // C++ ChargeParams <> JS ChargeParams (object)
  template <>
  struct JSIConverter<ChargeParams> final {
    static inline ChargeParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ChargeParams(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "currency")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "accountId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "email")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cardCryptogram")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cardNumber")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "expDate")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cvv"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ChargeParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "amount", JSIConverter<double>::toJSI(runtime, arg.amount));
      obj.setProperty(runtime, "currency", JSIConverter<std::string>::toJSI(runtime, arg.currency));
      obj.setProperty(runtime, "description", JSIConverter<std::string>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "accountId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.accountId));
      obj.setProperty(runtime, "email", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.email));
      obj.setProperty(runtime, "cardCryptogram", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cardCryptogram));
      obj.setProperty(runtime, "cardNumber", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cardNumber));
      obj.setProperty(runtime, "expDate", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.expDate));
      obj.setProperty(runtime, "cvv", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cvv));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "currency"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "accountId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "email"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cardCryptogram"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cardNumber"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "expDate"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cvv"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
