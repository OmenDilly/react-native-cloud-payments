///
/// ThreeDsResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::cloudpayments {

  /**
   * A struct which can be represented as a JavaScript object (ThreeDsResult).
   */
  struct ThreeDsResult {
  public:
    std::string transactionId     SWIFT_PRIVATE;
    std::string paRes     SWIFT_PRIVATE;
    bool success     SWIFT_PRIVATE;

  public:
    ThreeDsResult() = default;
    explicit ThreeDsResult(std::string transactionId, std::string paRes, bool success): transactionId(transactionId), paRes(paRes), success(success) {}
  };

} // namespace margelo::nitro::cloudpayments

namespace margelo::nitro {

  using namespace margelo::nitro::cloudpayments;

  // C++ ThreeDsResult <> JS ThreeDsResult (object)
  template <>
  struct JSIConverter<ThreeDsResult> final {
    static inline ThreeDsResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ThreeDsResult(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "transactionId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "paRes")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "success"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ThreeDsResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "transactionId", JSIConverter<std::string>::toJSI(runtime, arg.transactionId));
      obj.setProperty(runtime, "paRes", JSIConverter<std::string>::toJSI(runtime, arg.paRes));
      obj.setProperty(runtime, "success", JSIConverter<bool>::toJSI(runtime, arg.success));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "transactionId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "paRes"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "success"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
