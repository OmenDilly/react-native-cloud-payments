///
/// ApplePayParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct StringHolder; }

#include <string>
#include <optional>
#include <vector>
#include "StringHolder.hpp"

namespace margelo::nitro::cloudpayments {

  /**
   * A struct which can be represented as a JavaScript object (ApplePayParams).
   */
  struct ApplePayParams {
  public:
    std::string merchantId     SWIFT_PRIVATE;
    double amount     SWIFT_PRIVATE;
    std::string currency     SWIFT_PRIVATE;
    std::string description     SWIFT_PRIVATE;
    std::optional<std::string> countryCode     SWIFT_PRIVATE;
    std::optional<std::vector<StringHolder>> supportedNetworks     SWIFT_PRIVATE;
    std::optional<std::vector<StringHolder>> merchantCapabilities     SWIFT_PRIVATE;

  public:
    ApplePayParams() = default;
    explicit ApplePayParams(std::string merchantId, double amount, std::string currency, std::string description, std::optional<std::string> countryCode, std::optional<std::vector<StringHolder>> supportedNetworks, std::optional<std::vector<StringHolder>> merchantCapabilities): merchantId(merchantId), amount(amount), currency(currency), description(description), countryCode(countryCode), supportedNetworks(supportedNetworks), merchantCapabilities(merchantCapabilities) {}
  };

} // namespace margelo::nitro::cloudpayments

namespace margelo::nitro {

  using namespace margelo::nitro::cloudpayments;

  // C++ ApplePayParams <> JS ApplePayParams (object)
  template <>
  struct JSIConverter<ApplePayParams> final {
    static inline ApplePayParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ApplePayParams(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "merchantId")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "currency")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "countryCode")),
        JSIConverter<std::optional<std::vector<StringHolder>>>::fromJSI(runtime, obj.getProperty(runtime, "supportedNetworks")),
        JSIConverter<std::optional<std::vector<StringHolder>>>::fromJSI(runtime, obj.getProperty(runtime, "merchantCapabilities"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ApplePayParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "merchantId", JSIConverter<std::string>::toJSI(runtime, arg.merchantId));
      obj.setProperty(runtime, "amount", JSIConverter<double>::toJSI(runtime, arg.amount));
      obj.setProperty(runtime, "currency", JSIConverter<std::string>::toJSI(runtime, arg.currency));
      obj.setProperty(runtime, "description", JSIConverter<std::string>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "countryCode", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.countryCode));
      obj.setProperty(runtime, "supportedNetworks", JSIConverter<std::optional<std::vector<StringHolder>>>::toJSI(runtime, arg.supportedNetworks));
      obj.setProperty(runtime, "merchantCapabilities", JSIConverter<std::optional<std::vector<StringHolder>>>::toJSI(runtime, arg.merchantCapabilities));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "merchantId"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "currency"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "countryCode"))) return false;
      if (!JSIConverter<std::optional<std::vector<StringHolder>>>::canConvert(runtime, obj.getProperty(runtime, "supportedNetworks"))) return false;
      if (!JSIConverter<std::optional<std::vector<StringHolder>>>::canConvert(runtime, obj.getProperty(runtime, "merchantCapabilities"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
