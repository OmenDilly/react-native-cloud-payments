///
/// HybridCloudPaymentsSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `CardCryptogramParams` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct CardCryptogramParams; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "CardCryptogramParams.hpp"

namespace margelo::nitro::cloudpayments {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `CloudPayments`
   * Inherit this class to create instances of `HybridCloudPaymentsSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridCloudPayments: public HybridCloudPaymentsSpec {
   * public:
   *   HybridCloudPayments(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridCloudPaymentsSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridCloudPaymentsSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridCloudPaymentsSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<bool>> initialize(const std::string& publicId, const std::string& publicKey, double keyVersion) = 0;
      virtual std::shared_ptr<Promise<std::string>> generateCardCryptogram(const CardCryptogramParams& params) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "CloudPayments";
  };

} // namespace margelo::nitro::cloudpayments
