///
/// JApplePayParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ApplePayParams.hpp"

#include "JStringHolder.hpp"
#include "StringHolder.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::cloudpayments {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "ApplePayParams" and the the Kotlin data class "ApplePayParams".
   */
  struct JApplePayParams final: public jni::JavaClass<JApplePayParams> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/cloudpayments/ApplePayParams;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct ApplePayParams by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ApplePayParams toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldMerchantId = clazz->getField<jni::JString>("merchantId");
      jni::local_ref<jni::JString> merchantId = this->getFieldValue(fieldMerchantId);
      static const auto fieldAmount = clazz->getField<double>("amount");
      double amount = this->getFieldValue(fieldAmount);
      static const auto fieldCurrency = clazz->getField<jni::JString>("currency");
      jni::local_ref<jni::JString> currency = this->getFieldValue(fieldCurrency);
      static const auto fieldDescription = clazz->getField<jni::JString>("description");
      jni::local_ref<jni::JString> description = this->getFieldValue(fieldDescription);
      static const auto fieldCountryCode = clazz->getField<jni::JString>("countryCode");
      jni::local_ref<jni::JString> countryCode = this->getFieldValue(fieldCountryCode);
      static const auto fieldSupportedNetworks = clazz->getField<jni::JArrayClass<JStringHolder>>("supportedNetworks");
      jni::local_ref<jni::JArrayClass<JStringHolder>> supportedNetworks = this->getFieldValue(fieldSupportedNetworks);
      static const auto fieldMerchantCapabilities = clazz->getField<jni::JArrayClass<JStringHolder>>("merchantCapabilities");
      jni::local_ref<jni::JArrayClass<JStringHolder>> merchantCapabilities = this->getFieldValue(fieldMerchantCapabilities);
      return ApplePayParams(
        merchantId->toStdString(),
        amount,
        currency->toStdString(),
        description->toStdString(),
        countryCode != nullptr ? std::make_optional(countryCode->toStdString()) : std::nullopt,
        supportedNetworks != nullptr ? std::make_optional([&]() {
          size_t __size = supportedNetworks->size();
          std::vector<StringHolder> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = supportedNetworks->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt,
        merchantCapabilities != nullptr ? std::make_optional([&]() {
          size_t __size = merchantCapabilities->size();
          std::vector<StringHolder> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = merchantCapabilities->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JApplePayParams::javaobject> fromCpp(const ApplePayParams& value) {
      return newInstance(
        jni::make_jstring(value.merchantId),
        value.amount,
        jni::make_jstring(value.currency),
        jni::make_jstring(value.description),
        value.countryCode.has_value() ? jni::make_jstring(value.countryCode.value()) : nullptr,
        value.supportedNetworks.has_value() ? [&]() {
          size_t __size = value.supportedNetworks.value().size();
          jni::local_ref<jni::JArrayClass<JStringHolder>> __array = jni::JArrayClass<JStringHolder>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.supportedNetworks.value()[__i];
            __array->setElement(__i, *JStringHolder::fromCpp(__element));
          }
          return __array;
        }() : nullptr,
        value.merchantCapabilities.has_value() ? [&]() {
          size_t __size = value.merchantCapabilities.value().size();
          jni::local_ref<jni::JArrayClass<JStringHolder>> __array = jni::JArrayClass<JStringHolder>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.merchantCapabilities.value()[__i];
            __array->setElement(__i, *JStringHolder::fromCpp(__element));
          }
          return __array;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::cloudpayments
