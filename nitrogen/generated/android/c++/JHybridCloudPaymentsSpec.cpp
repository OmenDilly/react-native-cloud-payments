///
/// JHybridCloudPaymentsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridCloudPaymentsSpec.hpp"

// Forward declaration of `CardCryptogramParams` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct CardCryptogramParams; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <string>
#include "CardCryptogramParams.hpp"
#include "JCardCryptogramParams.hpp"

namespace margelo::nitro::cloudpayments {

  jni::local_ref<JHybridCloudPaymentsSpec::jhybriddata> JHybridCloudPaymentsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCloudPaymentsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCloudPaymentsSpec::initHybrid),
    });
  }

  size_t JHybridCloudPaymentsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<bool>> JHybridCloudPaymentsSpec::initialize(const std::string& publicId, const std::string& publicKey, double keyVersion) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* publicId */, jni::alias_ref<jni::JString> /* publicKey */, double /* keyVersion */)>("initialize");
    auto __result = method(_javaPart, jni::make_jstring(publicId), jni::make_jstring(publicKey), keyVersion);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridCloudPaymentsSpec::generateCardCryptogram(const CardCryptogramParams& params) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JCardCryptogramParams> /* params */)>("generateCardCryptogram");
    auto __result = method(_javaPart, JCardCryptogramParams::fromCpp(params));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::cloudpayments
