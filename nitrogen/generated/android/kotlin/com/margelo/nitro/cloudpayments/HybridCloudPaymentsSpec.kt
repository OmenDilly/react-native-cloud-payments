///
/// HybridCloudPaymentsSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.cloudpayments

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the CloudPayments HybridObject.
 * Implement this abstract class to create Kotlin-based instances of CloudPayments.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridCloudPaymentsSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun initialize(publicId: String, publicKey: String, keyVersion: Double): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun generateCardCryptogram(params: CardCryptogramParams): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun isApplePayAvailable(): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun isApplePayAvailableWithNetworks(networks: Array<StringHolder>?): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun requestApplePayPayment(params: ApplePayParams): Promise<ApplePayResult>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridCloudPaymentsSpec"
  }
}
