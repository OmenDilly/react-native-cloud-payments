///
/// ChargeParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ChargeParams`, backed by a C++ struct.
 */
public typealias ChargeParams = margelo.nitro.cloudpayments.ChargeParams

public extension ChargeParams {
  private typealias bridge = margelo.nitro.cloudpayments.bridge.swift

  /**
   * Create a new instance of `ChargeParams`.
   */
  init(amount: Double, currency: String, description: String, accountId: String?, email: String?, cardCryptogram: String?, cardNumber: String?, expDate: String?, cvv: String?) {
    self.init(amount, std.string(currency), std.string(description), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = accountId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = email {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = cardCryptogram {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = cardNumber {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = expDate {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = cvv {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var amount: Double {
    @inline(__always)
    get {
      return self.__amount
    }
    @inline(__always)
    set {
      self.__amount = newValue
    }
  }
  
  var currency: String {
    @inline(__always)
    get {
      return String(self.__currency)
    }
    @inline(__always)
    set {
      self.__currency = std.string(newValue)
    }
  }
  
  var description: String {
    @inline(__always)
    get {
      return String(self.__description)
    }
    @inline(__always)
    set {
      self.__description = std.string(newValue)
    }
  }
  
  var accountId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__accountId.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__accountId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var email: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__email.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__email = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var cardCryptogram: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__cardCryptogram.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cardCryptogram = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var cardNumber: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__cardNumber.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cardNumber = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var expDate: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__expDate.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__expDate = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var cvv: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__cvv.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cvv = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
