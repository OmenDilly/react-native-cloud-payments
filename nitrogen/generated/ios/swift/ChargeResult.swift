///
/// ChargeResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ChargeResult`, backed by a C++ struct.
 */
public typealias ChargeResult = margelo.nitro.cloudpayments.ChargeResult

public extension ChargeResult {
  private typealias bridge = margelo.nitro.cloudpayments.bridge.swift

  /**
   * Create a new instance of `ChargeResult`.
   */
  init(transactionId: String, status: ChargeStatus, reasonCode: Double?, reasonMessage: String?, paReq: String?, acsUrl: String?, success: Bool) {
    self.init(std.string(transactionId), status, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = reasonCode {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = reasonMessage {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = paReq {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = acsUrl {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), success)
  }

  var transactionId: String {
    @inline(__always)
    get {
      return String(self.__transactionId)
    }
    @inline(__always)
    set {
      self.__transactionId = std.string(newValue)
    }
  }
  
  var status: ChargeStatus {
    @inline(__always)
    get {
      return self.__status
    }
    @inline(__always)
    set {
      self.__status = newValue
    }
  }
  
  var reasonCode: Double? {
    @inline(__always)
    get {
      return self.__reasonCode.value
    }
    @inline(__always)
    set {
      self.__reasonCode = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var reasonMessage: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__reasonMessage.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__reasonMessage = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var paReq: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__paReq.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__paReq = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var acsUrl: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__acsUrl.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__acsUrl = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var success: Bool {
    @inline(__always)
    get {
      return self.__success
    }
    @inline(__always)
    set {
      self.__success = newValue
    }
  }
}
