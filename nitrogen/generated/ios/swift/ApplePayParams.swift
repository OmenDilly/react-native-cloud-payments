///
/// ApplePayParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ApplePayParams`, backed by a C++ struct.
 */
public typealias ApplePayParams = margelo.nitro.cloudpayments.ApplePayParams

public extension ApplePayParams {
  private typealias bridge = margelo.nitro.cloudpayments.bridge.swift

  /**
   * Create a new instance of `ApplePayParams`.
   */
  init(merchantId: String, amount: Double, currency: String, description: String, countryCode: String?, supportedNetworks: [StringHolder]?, merchantCapabilities: [StringHolder]?) {
    self.init(std.string(merchantId), amount, std.string(currency), std.string(description), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = countryCode {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_StringHolder__ in
      if let __unwrappedValue = supportedNetworks {
        return bridge.create_std__optional_std__vector_StringHolder__({ () -> bridge.std__vector_StringHolder_ in
          var __vector = bridge.create_std__vector_StringHolder_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(__item)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_StringHolder__ in
      if let __unwrappedValue = merchantCapabilities {
        return bridge.create_std__optional_std__vector_StringHolder__({ () -> bridge.std__vector_StringHolder_ in
          var __vector = bridge.create_std__vector_StringHolder_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(__item)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }())
  }

  var merchantId: String {
    @inline(__always)
    get {
      return String(self.__merchantId)
    }
    @inline(__always)
    set {
      self.__merchantId = std.string(newValue)
    }
  }
  
  var amount: Double {
    @inline(__always)
    get {
      return self.__amount
    }
    @inline(__always)
    set {
      self.__amount = newValue
    }
  }
  
  var currency: String {
    @inline(__always)
    get {
      return String(self.__currency)
    }
    @inline(__always)
    set {
      self.__currency = std.string(newValue)
    }
  }
  
  var description: String {
    @inline(__always)
    get {
      return String(self.__description)
    }
    @inline(__always)
    set {
      self.__description = std.string(newValue)
    }
  }
  
  var countryCode: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__countryCode.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__countryCode = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var supportedNetworks: [StringHolder]? {
    @inline(__always)
    get {
      return { () -> [StringHolder]? in
        if let __unwrapped = self.__supportedNetworks.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__supportedNetworks = { () -> bridge.std__optional_std__vector_StringHolder__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_StringHolder__({ () -> bridge.std__vector_StringHolder_ in
            var __vector = bridge.create_std__vector_StringHolder_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var merchantCapabilities: [StringHolder]? {
    @inline(__always)
    get {
      return { () -> [StringHolder]? in
        if let __unwrapped = self.__merchantCapabilities.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__merchantCapabilities = { () -> bridge.std__optional_std__vector_StringHolder__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_StringHolder__({ () -> bridge.std__vector_StringHolder_ in
            var __vector = bridge.create_std__vector_StringHolder_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
}
