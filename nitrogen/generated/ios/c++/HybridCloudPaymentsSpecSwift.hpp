///
/// HybridCloudPaymentsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCloudPaymentsSpec.hpp"

// Forward declaration of `HybridCloudPaymentsSpec_cxx` to properly resolve imports.
namespace NitroCloudPayments { class HybridCloudPaymentsSpec_cxx; }

// Forward declaration of `CardCryptogramParams` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct CardCryptogramParams; }
// Forward declaration of `ApplePayResult` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct ApplePayResult; }
// Forward declaration of `ApplePayParams` to properly resolve imports.
namespace margelo::nitro::cloudpayments { struct ApplePayParams; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "CardCryptogramParams.hpp"
#include <optional>
#include <vector>
#include "ApplePayResult.hpp"
#include "ApplePayParams.hpp"

#include "NitroCloudPayments-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::cloudpayments {

  /**
   * The C++ part of HybridCloudPaymentsSpec_cxx.swift.
   *
   * HybridCloudPaymentsSpecSwift (C++) accesses HybridCloudPaymentsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCloudPaymentsSpec_cxx can directly inherit from the C++ class HybridCloudPaymentsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridCloudPaymentsSpecSwift: public virtual HybridCloudPaymentsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridCloudPaymentsSpecSwift(const NitroCloudPayments::HybridCloudPaymentsSpec_cxx& swiftPart):
      HybridObject(HybridCloudPaymentsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroCloudPayments::HybridCloudPaymentsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<bool>> initialize(const std::string& publicId, const std::string& publicKey, double keyVersion) override {
      auto __result = _swiftPart.initialize(publicId, publicKey, std::forward<decltype(keyVersion)>(keyVersion));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> generateCardCryptogram(const CardCryptogramParams& params) override {
      auto __result = _swiftPart.generateCardCryptogram(params);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isApplePayAvailable() override {
      auto __result = _swiftPart.isApplePayAvailable();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isApplePayAvailableWithNetworks(const std::optional<std::vector<std::string>>& networks) override {
      auto __result = _swiftPart.isApplePayAvailableWithNetworks(networks);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<ApplePayResult>> requestApplePayPayment(const ApplePayParams& params) override {
      auto __result = _swiftPart.requestApplePayPayment(params);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> getMerchantIdFromEntitlements() override {
      auto __result = _swiftPart.getMerchantIdFromEntitlements();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroCloudPayments::HybridCloudPaymentsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::cloudpayments
